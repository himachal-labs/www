---
import { Image } from 'astro:assets';

// Import content from migration
const content = await import('../../migration_static/content/extracted_content.json');
const navigation = content.default.navigation;
---

<nav class="bg-white border-b border-gray-200 sticky top-0 z-50 backdrop-blur-sm bg-white/95" aria-label="Main navigation">
  <div class="container-center">
    <div class="flex justify-between items-center h-16">
      <!-- Logo -->
      <div class="flex-shrink-0">
        <a 
          href="/" 
          class="flex items-center space-x-3 text-gray-900 hover:text-primary-600 transition-colors duration-200 focus-ring rounded-lg p-1"
          aria-label="VastSilicon Home"
        >
          <img 
            src="/assets/vast_silicon_logo.png" 
            alt="VastSilicon Logo" 
            class="h-8 w-auto"
            width="32"
            height="32"
            loading="eager"
          />
          <span class="font-semibold text-lg hidden sm:block">VastSilicon</span>
        </a>
      </div>
      
      <!-- Desktop Navigation -->
      <div class="hidden md:block">
        <div class="ml-10 flex items-baseline space-x-8">
          {navigation.main.map((item: string) => (
            <a 
              href={item === 'Home' ? '/' : `/${item.toLowerCase()}`}
              class="text-gray-600 hover:text-primary-600 px-3 py-2 rounded-md text-sm font-medium transition-colors duration-200 focus-ring"
              aria-current={item === 'Home' ? 'page' : undefined}
            >
              {item}
            </a>
          ))}
        </div>
      </div>
      
      <!-- CTA Button -->
      <div class="hidden md:block">
        <a 
          href="#products" 
          class="btn-primary"
          aria-label="Discover our products"
        >
          Discover Products
        </a>
      </div>
      
      <!-- Mobile menu button -->
      <div class="md:hidden">
        <button 
          type="button" 
          class="text-gray-600 hover:text-primary-600 p-2 rounded-md focus-ring"
          aria-expanded="false"
          aria-controls="mobile-menu"
          aria-label="Open main menu"
          id="mobile-menu-button"
        >
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>
    </div>
  </div>
  
  <!-- Mobile menu -->
  <div class="md:hidden hidden" id="mobile-menu">
    <div class="px-2 pt-2 pb-3 space-y-1 bg-white border-t border-gray-200">
      {navigation.main.map((item: string) => (
        <a 
          href={item === 'Home' ? '/' : `/${item.toLowerCase()}`}
          class="text-gray-600 hover:text-primary-600 block px-3 py-2 rounded-md text-base font-medium transition-colors duration-200 focus-ring"
          aria-current={item === 'Home' ? 'page' : undefined}
        >
          {item}
        </a>
      ))}
      <a 
        href="#products" 
        class="btn-primary w-full mt-4"
        aria-label="Discover our products"
      >
        Discover Products
      </a>
    </div>
  </div>
</nav>

<script>
  // Mobile menu toggle functionality
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', () => {
        const isOpen = mobileMenu.classList.contains('hidden');
        
        if (isOpen) {
          mobileMenu.classList.remove('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'true');
        } else {
          mobileMenu.classList.add('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'false');
        }
      });
      
      // Close mobile menu when clicking outside
      document.addEventListener('click', (event) => {
        if (!mobileMenuButton.contains(event.target as Node) && 
            !mobileMenu.contains(event.target as Node)) {
          mobileMenu.classList.add('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'false');
        }
      });
      
      // Close mobile menu on escape key
      document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape' && !mobileMenu.classList.contains('hidden')) {
          mobileMenu.classList.add('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'false');
          mobileMenuButton.focus();
        }
      });
    }
  });
</script>